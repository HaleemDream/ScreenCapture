1. Find efficient screen capture (done)
2. create seperate class to capture screen (done - screen_capture)
3. creapte seperate class to read and display screen (done - canvas)
4. create network classes to: (need to accept args from main - host, ip)
    4.1 hole punch
    4.2 send UDP/TCP (probably UDP) to client from server (core implemented -UDP)
    4.3 pass incoming data canvas -> display contents of server to client

More on Network:
    - The UDP server is the local peer who wants to share their screen
    - local peer starts UDP server and waits to recv message (from remote peer):
        message should indicate resolution size of remote peer
    - local peer begins transmitting udp packets to the remote peer:
        packet sizes : UNDETERMINED
        capability of setting rgb value at (x,y) is possible - this allows
        to send a full image once and then repaint only the differences
        - need to test out/investigate capabilities of UDP for high bandwidth app
        (should full image be sent each time or should we only send the difference for performance gain)

03/06/2020 - basic udp send/recv from peers implemented
    
Note: should start watching PC usage to ensure app is light-weight
    
Look into why program freezes up every once in a while. (might be fixed)
